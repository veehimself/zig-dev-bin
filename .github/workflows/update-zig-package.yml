name: Zig Package Update and Release
on:
  schedule:
    # Run every 1 days
    - cron: '0 0 */1 * *'
  workflow_dispatch:  # Allow manual triggering
  push:
    paths:
      - 'PKGBUILD'  # Trigger when PKGBUILD is updated

# Add permission to create releases and push to the repository
permissions:
  contents: write

jobs:
  update-and-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup git for commits
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
      - name: Run updater in Docker
        run: |
          # Run the updater in an Arch Linux Docker container
          docker run --rm -v ${{ github.workspace }}:/work -w /work archlinux:latest bash -c "
            pacman -Syu --noconfirm
            pacman -S --noconfirm jq curl minisign ripgrep
            chmod +x ./updater.sh
            ./updater.sh
          "
          
          # Check for changes and commit if any - but continue either way
          if git diff --exit-code PKGBUILD; then
            echo "No changes detected in PKGBUILD, continuing with build"
          else
            echo "Changes detected in PKGBUILD, committing updates"
            
            # Commit the changes
            git add PKGBUILD
            git commit -m "Update Zig version from updater.sh"
            git push
          fi
          
          # Get current date for tagging
          echo "build_date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
        id: update
        
      - name: Build package in Docker
        run: |
          # Run makepkg in an Arch Linux Docker container
          docker run --rm -v ${{ github.workspace }}:/work -w /work archlinux:latest bash -c "
            pacman -Syu --noconfirm
            pacman -S --noconfirm base-devel sudo git jq curl minisign ripgrep
            
            # Create a non-root user for makepkg (it refuses to run as root)
            useradd -m builder
            chown -R builder:builder /work
            
            # Run makepkg as the builder user - removed --nocheck to ensure prepare() runs
            sudo -u builder bash -c 'cd /work && makepkg -f --skipinteg'
            
            # List all files to debug what was created
            echo 'Files created in /work:'
            ls -la /work/
            echo 'Looking for package files:'
            find /work -name '*.pkg.tar.*' -type f
            echo 'All .tar files:'
            find /work -name '*.tar*' -type f
            
            # Ensure proper ownership for the GitHub runner
            chown -R $(id -u):$(id -g) /work || true
          "
          
      - name: List package files for debugging
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Looking for package files:"
          find . -name "*.pkg.tar.*" -type f
          echo "All files with 'pkg' in name:"
          find . -name "*pkg*" -type f
          
      - name: Rename package file to new format
        run: |
          # Find the original package file
          ORIGINAL_FILE=$(find . -name "zig-dev-bin-*.pkg.tar.*" -type f | head -1)
          
          if [ -z "$ORIGINAL_FILE" ]; then
            echo "Error: No zig-dev-bin package file found!"
            exit 1
          fi
          
          echo "Found original package file: $ORIGINAL_FILE"
          
          # Extract version from PKGBUILD
          VERSION=$(grep '^pkgver=' PKGBUILD | cut -d'=' -f2)
          PKGREL=$(grep '^pkgrel=' PKGBUILD | cut -d'=' -f2)
          
          # Get file extension (.pkg.tar.zst or .pkg.tar.xz)
          EXTENSION="${ORIGINAL_FILE##*.pkg.tar.}"
          
          # Create new filename: zig-dev-bin-linux-VERSION-x86_64.pkg.tar.EXTENSION
          NEW_FILENAME="zig-dev-bin-linux-${VERSION}-x86_64.pkg.tar.${EXTENSION}"
          
          echo "Renaming to: $NEW_FILENAME"
          mv "$ORIGINAL_FILE" "$NEW_FILENAME"
          
          # Store the new filename for later steps
          echo "package_file=$NEW_FILENAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        id: rename
          
      - name: Delete previous release and tag
        run: |
          # Delete the release first
          gh release delete latest --yes || echo "Release 'latest' not found, continuing..."
          
          # Delete remote tag
          git push --delete origin latest || echo "Remote tag 'latest' not found, continuing..."
          
          # Delete local tag if it exists
          git tag -d latest || echo "Local tag 'latest' not found, continuing..."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
          
      - name: Create new release
        run: |
          # Use the renamed package file from previous step
          PACKAGE_FILE="${{ steps.rename.outputs.package_file }}"
          VERSION="${{ steps.rename.outputs.version }}"
          
          if [ -z "$PACKAGE_FILE" ] || [ ! -f "$PACKAGE_FILE" ]; then
            echo "Error: Package file '$PACKAGE_FILE' not found!"
            exit 1
          fi
          
          echo "Using package file: $PACKAGE_FILE"
          echo "Package version: $VERSION"
          
          # Create and push the tag first
          git tag latest
          git push origin latest
          
          # Create release with gh CLI (more reliable than action)
          gh release create latest \
            --title "Zig Dev Build - v$VERSION" \
            --notes "# Zig Development Build - v$VERSION

          **Build Information:**
          - Version: \`$VERSION\`
          - Build Date: ${{ steps.update.outputs.build_date }}
          - Workflow Run: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - Build triggered by: ${{ github.event_name }}
          - Package file: \`$PACKAGE_FILE\`

          **Installation:**
          Download the package file and install with:
          \`\`\`bash
          # Download the package
          wget https://github.com/${{ github.repository }}/releases/download/latest/$PACKAGE_FILE
          
          # Install with pacman
          sudo pacman -U $PACKAGE_FILE
          \`\`\`

          **Alternative installation:**
          \`\`\`bash
          # Direct install from URL
          sudo pacman -U https://github.com/${{ github.repository }}/releases/download/latest/$PACKAGE_FILE
          \`\`\`

          **What's included:**
          - Latest Zig development build
          - All necessary dependencies
          - Documentation (when available)
          - Signature verification" \
            --latest \
            "$PACKAGE_FILE"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
